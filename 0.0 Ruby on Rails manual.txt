I. Что за что отвечает/ Определения

-----------------                          # маршруты
(\config\routes.rb)                        - создаётся маршрут/путь
(\views\contacts\new.html.erb)             - создаётся представление
(\app\cointrollers\contacts_controller.rb) - создаются контроллеры
(\app\models\contact.rb)                   - создаются модели (условия для параметров)
(\app\assets\stylesheets\application.css)  - создаются выводы ошибок и т.д.
************************************************************************************************************
************************************************************************************************************



II. Последовательность действий, для создания всего

************************************        # план действий
Создать приложение:
  1. Создание Model + загрука её (rake db:migrate)
  2. Создание Controller
  3. Привязать маршрут(Routes) по которому следовать (resource/resources)
  4. Actions (index(множественных, как resources), new+create, edit+update, destroy(delete)) т.е. работа в Controller
  5. Views т.е. работа с самой страницей
  6. Вывод ошибок

-----------------
P.S. создадим зависимый ресурс(комментарии), от основного(статья) (Articles -> Comments, Статья и к ней добавлять комментарии)
  7.
    - Создание Model + загрука её (rake db:migrate)
    - Создание Controller
    - Привязать маршрут(Routes) по которому следовать (resource/resources)
    - Actions (index(множественных, как resources), new+create, edit+update, destroy(delete)) т.е. работа в Controller
    - Views т.е. работа с самой страницей


************************************        #  создать приложение
rails new name                              - (cmd) создать каталог rails
start rails server                          - (cmd) запустить сервер
start rails s                               - (cmd) запустить сервер, сокращённый вариант


1. ************************************     # создание модели/БД (dm\migrate\имяфаила.rb) сама модель создаётся (app\models\article.rb)
rails generate model Article title:string text:text   - (cmd) создаём модель с услоаиями (можно сразу, можно потом изменить в самой таблице), в данном случае title:string text:text
rails g model Article title:string text:text          - (cmd) сокращённый вариант
rake db:migrate                                       - (cmd) запустить миграцию (внедрить миграцию в программу)


************************************        # пример обработки  MODELS (сбда включается валидация)
class Article < ApplicationRecord
  validates :title, presence: true
  validates :text, presence: true
end


2. ************************************     # создание контроллера (пример для Articles)
rails generate controller articles          - (cmd) создать "обработчик", всегда во множественном числе
rails g controller articles                 - (cmd) создать "обработчик" сокращённый вариант


3. ************************************                               # пример обработки  ROUTES
rake routes                                                           - выводит список маршрутов (показывает все маршруты, созданные в программе)

Rails.application.routes.draw do                                      - открываем фаил (\config\routes.rb)
  get 'home/index'
  get 'terms' => 'pages#terms'                                        - определяем путь перехода terms
  get 'about' => 'pages#about'                                        - определяем путь перехода about

  resource :contacts, only: [:new, :create], path_names: {:new => ''} - изменили путь, пустая строка - означает, что путь останется неизменным (но если хочешь поменять, то пиши что нужно) + создаём правила для пользования (2 из 6 добавили)

  resources :articles do                                              - привязали к arcicles путь comments (т.к. комментарии - зависят от сатьи)
      resources :comments
  end
end


4. ************************************           # пример обработки  Articles (добавление Actions)
class ArticlesController < ApplicationController
  def index
    @articles = Article.all
  end

  def show                                        - добавили метод ПОКАЗАТЬ (пример со статьями)
    @article = Article.find(params[:id])
  end

  def new                                         - добавили метод НОВЫЙ (он обязан присутствовать)
  end

  def create                                      - добавили метод СОЗДАТЬ
    @article = Article.new(article_params)

    if @contact.save                              - сохраняем данные, а сохранение - делает, автоматически валидацию!!!
      redirect_to @contact                        - условия, от двойного submith'a !!
    else                                          - условия, если не все поля будут заполнены
      render action: 'new'                        - возврат страницы \contacts\new
  end

  def edit                                        - добавили метод КОРРЕКТИРОВАТЬ
    @article = Article.find(params[:id])
  end

  def update                                      - добавили метод РЕАЛИЗАЦИЯ коррекции (в свзяки с методом edit)
    @article = Article.find(params[:id])

    if @article.update(article_params)
      redirect_to @article
    else
      render action: 'edit'
    end
  end

  private                                         - условия данных, которые будут использоваться выше (своего рода - защита)

  def contact_params                              - создали функцию, обычно имя идёт от названия, с чем будем работать + _params  
    params.require(:contact).permit(:email, :message) - указали, нужные параметры. подключение зависимого ресурса :contact - require(:contact). permit(:email, :message) - характеристики
  end
end


5. ************************************                    # пример обработки  VIEWS (show.html.erb)
<h1><%= @article.title %></h1>                             - вывод заголовка
<p>
  <%= @article.text %>                                     - вывод теста поста
</p>

<h2>Comments</h2>
<% @article.comments.each do |comment| %>                  - работа со всеми комментариями
  <p>
    <i><%= comment.author %> said: </br></i>               - вывод автора комментария
    <%= comment.body %>
  </p>
<% end %>

<h2>Add comment</h2>
<%= form_for([@article, @article.comments.build]) do |f| %> - форма которая создаётся для связанных друг с другом сущностей (получится /articles/3/comments)
  <% if @article && @article.errors.any? %>                 ??? доделать этот пункт, с выводом ошибок, он не работает
  <p>
    <ul>
      <% @article.errors.full_messages.each do |msg| %>
        <li><%= msg %></li>
      <% end %>
    </ul>
  </p>
  <% end %>

  <p>                                                     - форма вывода поля для ввода автора комментария
    <%= f.label :author %><br/>
    <%= f.text_field :author %>
  </p>

  <p>                                                     - форма вывода поля для ввода текста комментария
    <%= f.label :body %><br/>
    <%= f.text_area :body %>
  </p>

  <p>                                                     - добавление кнопки, отправки на сервер
    <%= f.submit %>                                       - устойчивое выражение рельс, для отправки на сервер введённых данных
  </p>
<% end %>


6. ************************************                 # пример обработки  ASSETS\STYLESHEETS (сбда включается ошибки) (CSS)
.field_with_errors input {                              - поле для INPUTS
  border-color: red;                                    - делать границу красным (вводишь условия, которые тебе нужны)
}

.field_with_errors textarea {                           - поле для TEXTAREA
  border-color: red;                                    - делать границу красным (вводишь условия, которые тебе нужны)


7. ************************************         # создадим зависимый ресурс(комментарии), от основного(статья) (Articles -> Comments, Статья и к ней добавлять комментарии)
rails g model Comment author:string body:text   - (cmd) создаём модель с услоаиями (можно сразу, можно потом изменить в самой таблице), в данном случае title:string text:text
rake db:migrate                                 - (cmd) запустить миграцию

class Comment < ApplicationRecord               # пример обработки  MODELS
  belongs_to :article                           - условия зависимости от article
end

-----------------                               # создание контроллера
rails g controller comments                     - (cmd) создать "обработчик" сокращённый вариант

-----------------                                                     # пример обработки  ROUTES
Rails.application.routes.draw do                                      - открываем фаил (\config\routes.rb)
  get 'home/index'
  get 'terms' => 'pages#terms'                                        - определяем путь перехода terms
  get 'about' => 'pages#about'                                        - определяем путь перехода about

  resource :contacts, only: [:new, :create], path_names: {:new => ''} - изменили путь, пустая строка - означает, что путь останется неизменным (но если хочешь поменять, то пиши что нужно) + создаём правила для пользования (2 из 6 добавили)

  resources :articles do                                              - привязали к arcicles путь comments (т.к. комментарии - зависят от сатьи)
      resources :comments
  end
end

-----------------                                 # пример обработки  Articles (добавление Actions)
class CommentsController < ApplicationController
  def create                                      - создали Action - create
    @article = Article.find(params[:article_id])  - привязали к переменной номер статьи
    @article.comments.create(comment_params)      - связываем пост с параметрами комментариев
    
    redirect_to article_path(@article)            - прерывает комманду и возвращает, на исходное положение условий (путь)
  end

  private                                         - условия данных, которые будут использоваться выше (своего рода - защита)

  def comment_params                              - создали функцию, обычно имя идёт от названия, с чем будем работать + _params
    params.require(:comment).permit(:autor, :body) - указали, нужные параметры
  end        
end

-----------------                                 # Views т.е. работа с самой страницей
Views включён в зависимый ресурс Article          - смотреть пункт 5
************************************************************************************************************
************************************************************************************************************