V. Массивы (Array)

************************************        # создание/определения
[1,2,3,4,5]                                 - создание массива (1)
arr = Array.new(5) {block}                  - создание массива (2)
arr = (1..5).to_a                           - создание массива (3)

arr = %w[HI Bye]                            - строчный массив
arr = ["HI","bye"]                          - строчный массив
arr = [:HI, :Bye]                           - массив из символов
arr << name                                 - добавить "name" в массив "arr"
arr.push(name)                              - добавить "name" в массив "arr"

arr = [0a,1b,2c,3d,4e]                      - как с массива выбрать только 1b,2c,3d - [1..3] (не забываем, что индекс начинается с 0) (L10.1.2.rb)
arr2 = arr[rand(0..2)]                      - как с массива выбрать конкретный элемент, или чтобы рандомно что-то взялось

line.split ","                              - разбить текст на массив (каждая строка - один массив!) (L17.5.0.rb)

array * int  #=> an_array
array * str  #=> a_string


************************************        # поиск по массиву
.size  (.compact.size)                      - считает количество элементов в массиве
.nitems                                     - считает количество элементов в массиве без nil ([ 1, nil, 3, nil, 5 ].nitems  #=> 3)
.count                                      - считает количество элементов в массиве         (ary = [1, 2, 4, 2], ary.count #=> 4)
.count(2)                                   - считает количество (2) в массиве               (ary = [1, 2, 3, 2], ary.count(2) #=> 2)
.count {|x|x%2==0}                          - считает количество условий в массиве

.find_all(obj) or { |elem| elem % 2 == 0 }  - поиск конкретных данных, или условий
.max                                        - максимальный по значению
.max_by{ |elem| elem.size }                 - максимальный по размеру строки |block|
.min                                        - минимальный по значению
.min_by{ |elem| elem.size }                 - минимальный по размеру строки |block|

.index(obj_name)                            - говорит, под каким index'ом находится интересующий объект
.rindex(obj_name)                           - говорит, под каким index'ом находится интересующий объект (находит obj с конца)!! если присутсвуют одинаковые объекты
.values_at(selector,... )                   - возвращает массив, который соответствуют передаваемым селекторам (a=[1,2,3,4] a.values_at(1,3) #=> 2,4)
.first(n)/.at(0)                            - возвращает первый элемент или первые n элементов массива
.last(n)/.at(-1)                            - возвращает первый элемент с конца или первые n элементов массива с конца
.include?(obj_name)                         - содержит что-то?

.sample(x)                                  - взять рандомное значение из массива (x) - колличество рандомных значений 1,2 или 10 если нужно

.empty?                                     - возвращает true, если array не содержит элементов
.any?                                       - возвращает true, если array содержит элементов
.eql?(other)                                - возвращает true, если array и other являются одним и тем же объектом или оба массива обладают одинаковым содержимым
.frozen?                                    - возвращает true, если массив array заморожен (или временно заморожен, пока идет сортировка)
.hash                                       - вычисляет хеш-код для массива array

  .assoc(obj)                               - ищет в двумерном массиве массив, первый элемент которого равен obj
  .rassoc(obj)                              - ищет в двумерном массиве массив, второй элемент которого равен obj
  .zip(a,b)                                 - смотреть вик учебник!


************************************        # работа с данными массива (добавление, разбивание и т.д.)
.push("d", "e", "f")                        - добавляет передаваемый объект (или несколько объектов) в конец массива
.insert(index, obj...)                      - вставить в конкретное место массива, что хочешь arr=[1,2,3,4] => arr.insert(2, 99) #=> [1,2,99,3,4]
.unshift(obj, ...)                          - добавляет элементы в начало массива array (со сдвигом вправо уже существующих)
.fill(obj, range)                           - заполняют/заменить в массив значением выражения в блоке block (range 0..2 к примеру) ИЗМЕНЯЕТ СРАЗУ!
.fetch(index) { |index| block }             - условия с конкретным объектом, или использовать как .index(obj), a = [1,2] => a.fetch(1) #=> 2

.inject(){|a,b| a+b}                        - посчитать сумму всего массива, умножение, деление и т.д.
.join                                       - объеденяет все элементы в строку #=> "1234" (["a", "b", "c" ].join("-")  #=> "a-b-c")
.partition{block}                           - позволяющая разместить массив, полученный .partition, в две разные переменные one,two = array.partition{|x|(x % 3).zero?}
.inspect                                    - cоздает «печатную» версию массива array
.to_s  #=> string                           - делает массив строчным "[1,2,3,4]"

.collect! { |x| x + 1 }                     - сделать процесс, над каждыйм блоком массива (collect тоже самое что и map)
.map! { |x| x * x }                         - сделать процесс, над каждыйм блоком массива (map тоже самое что и collect)
.each {|item| block }                       - выполняет код в block для каждого элемента массива array, передавая в блок текущий элемент в качестве параметра
.each_index { |index| block }               - работает точно также, как и each, но передает в блок не текущий элемент, а индекс текущего элемента
.reject { |item| block }                    - значение внутри блока block равно false (или nil) (a = [1, 2, 3, 4] a.reject { |i| i > 2 } #=> [1, 2])
.select {|item| block }                     - значение внутри блока block равно true  (или nil) (a = [1, 2, 3, 4] a.select { |i| i > 2 } #=> [3, 4])

-----------------                           # сотировка массива
.sort!                                      - сортирует массива array (по возрастанию)
.sort! { |a, b| a <=> b }                   - блок предназначенный для сравнения параметров a и b, должен возвращать значения -1, 0, или +1
.compact!                                   - удаляет из массива все элементы nil
.nitems                                     - считает количество элементов в массиве без nil ([ 1, nil, 3, nil, 5 ].nitems  #=> 3)
.uniq!                                      - удаляет всех повторяющихся элементов (то есть остаются только «уникальные» элементы)

.reverse!                                   - возвращает новый массив, в котором элементы массива array стоят в обратном порядке
.reverse_each {|item| block }               - элементы массива array обрабатываются в обратном порядке

.transpose                                  - меняет местами столбцы со строками (a = [[1,2], [3,4], [5,6]] a.transpose  #=> [[1, 3, 5], [2, 4, 6]])

-----------------                                                 # работа с несколькими массивами и т.д.
(+) [1, 2, 3] + [4, 5]  #=> [1, 2, 3, 4, 5]                       - возвращает новый массив, созданный из двух массивов путем добавления одного к другому
(-) [1, 1, 2, 2, 3, 3, 4, 5] - [1, 2, 4]  #=> [3, 3, 5]           - возвращает новый массив, который копирует оригинальный массив, но удаляет из него элементы, которые есть в другом массиве
(*) [1, 2, 3] * 3    #=> [1, 2, 3, 1, 2, 3, 1, 2, 3]              - повторение — со строковым аргументом эквивалентен коду array.join(str). Иначе, возвращает новый массив, состоящий из int сцепленных копий array
(*) [1, 2, 3] * ","  #=> "1,2,3"                                  - повторение — со строковым аргументом эквивалентен коду array.join(str). Иначе, возвращает новый массив, состоящий из int сцепленных копий array
(&) [1, 1, 3, 5] & [1, 2, 3]  #=> [1, 3]                          - возвращает новый массив, состоящий из элементов, которые есть в обоих массивах, но без дубликатов
(|) ["a", "b", "c"] | ["c", "d", "a"]  #=> ["a", "b", "c", "d"]   - возвращает новый массив, который объединяет элементы массивов array и other_array, но с удаленными дубликатами
(<=>) array <=> other_array  #=> -1, 0, +1                        - возвращает целое число (-1, 0, или +1) если текущий массив меньше, равен или больше другого массива

.concat(other_array)                                              - то-же самое что и (+) возвращает новый массив, созданный из двух массивов путем добавления одного к другому
.flatten!                                                         - преобразует многомерный массив array в одномерный был ([[1, 2, 3], [4, 5, 6, [7, 8]], 9, 10]) стал ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
.replace(other_array)                                             - заменяет содержимое массива array содержимым массива other_array


************************************        # удаление и очистка массива
.clear                                      - очистить хеш/массив

.delete_at(index)                           - удалить конкретный объект
.delete(obj_name)                           - удалить все obj_name какой интересует

.shift                                      - удаляет первый элемент из массива array и возвращает его (как бы «сдвигает» массив влево на один элемент)
.pop                                        - удаляет последний элемент из массива
.slice!(range)                              - удаляет элемент или элементы массива array по индексу (иногда с продолжительностью length) или диапазону. (length 0..2 к примеру, или 1,3 - возьмутся все элементы между ними!)
.uniq!                                      - удаляет всех повторяющихся элементов (то есть остаются только «уникальные» элементы)

.compact!                                   - удаляет из массива все элементы nil
.delete_if {|x| x >= "b" }  #=> ["a"]       - удалить объекты, с условиями значение внутри блока block равно true, но возвращает nil (a = ["a", "b", "c"])
.reject! { |item| block }                   - удалить объекты, с условиями значение внутри блока block равно false (или nil) (a = [1, 2, 3, 4, 5] a.reject{ |item| item > 2 } #=> [1, 2])
************************************************************************************************************
************************************************************************************************************