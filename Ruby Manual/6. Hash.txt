VI. Hash (Dictionary, Hashtable, ассоциативные массивы)

************************************        # создание Hash
hh = {}                                     - создание Hash
hh = Hash.new{|h,k| h[k]=k.to_i*10}         - создание Hash с условиями (block), условия будут автоматически заполнять value, если просто создавать новый key без условия!
hh = Hash[*array] #=> {1=>4, 5=>3, 2=>2}    - создание Hash            (array = [1, 4, 5, 3, 2, 2])
hh = Hash[*array.flatten] #=> {1=>4, 5=>3, 2=>2} - создание Hash c 2D Array (array = [[1, 4], [5, 3], [2, 2]])
hh = Hash[*array.transpose.flatten]         - создание Hash c 2D Array ([["ключ_1", "ключ_2", "ключ_3", …], ["значение_1", "значение_2", "значение_3", …]])

-----------------                           # примеры
hh[key] = [value,value2]                    - при пустом hash, добавляем сразу и key & values
hh[key] << 'value3'                         - при имеющемся key, добавляем value
hh.delete 'key'                             - так удаляются конкретный key
hh.values[0].delete 'value'                 - так удаляются конкретное value


************************************        # поиск по Hash
.size                                       - узнать размерность Hash
.length                                     - узнать размерность Hash
.max                                        - сначала поиск происходит по ключу, а в случае равноправных ключей при использовании max_by и min_by — по значению
.min                                        - сначала поиск происходит по ключу, а в случае равноправных ключей при использовании max_by и min_by — по значению
.empty?                                     - пустой? true/false
== {}                                       - пустой?

.select {|key, value| block}                - получает из хеша, все элементы, для которых блок вычисляет значение true
.find_all {|array| array[1]<5} or {block}   - получает из хеша, все элементы, для которых блок вычисляет значение true

-----------------                           # методы поиска key
.keys                                       - находит из хеша только key, выдает массив
.max_by{ |key,value| key }                  - максимальный по размеру key
.min_by{ |key,value| key }                  - минимальный по размеру key

.key(value)        #-> key                  - найти key через value ! лучший метод
.index(value)      #-> key                  - найти key через value (устаревший, может не рабочий!)
.indexes(key, ...) #-> key                  - найти key через value (устаревший, может не рабочий!)

.key?     (name_key)                        - найти key через key true/false
.has_key? (name_key)                        - найти key через key true/false
.member?  (name_key)                        - найти key через key true/false
.include? (name_key)                        - найти key через key true/false

-----------------                           # методы поиска valuse
.values                                     - находит из хеша только value, выдает массив
.max_by{ |key,value| value }                - максимальный по размеру value
.min_by{ |key,value| value }                - минимальный по размеру value

h[key]                                      - найти value через key
.values_at  (key, ...)                      - найти value через key

.value?     (name_value)                    - найти value через value true/false
.has_value? (name_value)                    - найти value через value true/false


************************************        # работа с данными Hash (добавление, разбивание и т.д.)

-----------------                           # добавление
hh[key_name] = value_name                   - записать ключ-значение
hh[key] << value_name                       - при имеющемся key, добавляем value

.map{block}                                 - изменение всех элементов по некоторому алгоритму
.default (name_key)                         - выполняет условия, которые были установленны при создании Hash! можно воспроизводить просто h[name_key] без значения, и условия создадутся

.rehash                                     - обновить хеш (если состояние объектов-ключей изменилось)
.join(", ")                                 - соединяет массив в строку с разделителем (запятая)

.each       {| key, value | block }         - вызывает блок для каждый пары ключ-значение хеша (L11.2.0.rb)
.each_key   {| key | block }                - выполняет блок block для каждого ключа в хеше hsh, передавая в блок key в качестве параметра
.each_pair  {| key_value_array | block }    - выполняет блок block для каждого ключа в хеше hsh, передавая в блок key и value в качестве параметров
.each_value {| value | block }              - Выполняет блок block для каждого ключа в хеше hsh, передавая в блок значение value, соответствующее ключу, в качестве параметра

.fetch(key [, default] )                    - возвращает значение, соответствующее ключу key, если ключ не был найден, тогда есть несколько ситуаций: Без иных аргументов будет подниматься исключение IndexError; Если задан параметр default, тогда он и будет возвращен; Если конструкция определена с блоком, тогда будет выполняться блок, которому в качестве аргумента будет передан ключ
.fetch(key) {| key | block }                - возвращает значение, соответствующее ключу key, если ключ не был найден, тогда есть несколько ситуаций: Без иных аргументов будет подниматься исключение IndexError; Если задан параметр default, тогда он и будет возвращен; Если конструкция определена с блоком, тогда будет выполняться блок, которому в качестве аргумента будет передан ключ

.inspect                                    - возвращает содержимое хеша в виде строки
.invert                                     - меняет мествами key <=> value

-----------------                           # сортировка Hash и преобразование в массив+
.invert                                     - меняет местами ключи и значения
.invert.invert                              - возвратит нам хеш с уникальными значениями

.select {|key, value| block}                - получает из хеша, все элементы, для которых блок вычисляет значение true
.find_all {|array| array[1]<5} or {block}   - получает из хеша, все элементы, для которых блок вычисляет значение true
.to_a                                       - преобразовать в индексный массив
.sort #=> [["a", 20], ["b", 30], ["c", 10]] - результат потом будет не хешем, а 2D двумерным массивом [["гаечный ключ", 4], ["разводной ключ", 10]]
.sort_by                                    - сначала хеш упорядочивается по ключам + потом, в случаях равнозначных ключей (key==key) при использовании sort_by, — сравниваются значения
.inject(){|a,b| a+b}                        - посчитать сумму всего массива, умножение, деление и т.д.
hh.sort.flatten.inject(){|a,b| a+b}         - посчитать сумму всего хеш-массива, умножение, деление и т.д. (можно условия написать и на подсчёты чисто value, или key)

-----------------                           # работа с несколькими Hash и т.д.
.merge                                      - добавляет содержимое хеша hh к хешу hh1 (объеденение хеш (L13.1.3.rb) book = book1.merge book2)
.merge!                                     - добавляет содержимое хеша hh к хешу hh1 и изменяет существующий (L13.1.4.rb) book1.merge! book2
.update                                     - то-же самое что .merge!
.replace(other_hash)                        - заменяет содержимое хеша hh на содержимое хеша other_hash
h1 == h2                                    - true/false


************************************        # удаление и очистка Hash
.clear                                      - очистить хешc

.delete_if {| key, value | block }          - удаление с условиями (Удаляет все пары ключ-значение из хеша hsh для которых блок block вычисляет значение true)
.reject!   {| key, value | block }          - удаление с условиями + сохраняет оригинал, а копию сохраняет

-----------------                           # удаление для valuse
.values[0].delete 'value'                   - так удаляются конкретное value

-----------------                           # удаление для key
.delete(key)                                - удаляет по названию ключа, с его значениями!
.shift                                      - удалить 1ый key со значениями


hh[rand(0..(hh.size-1))]                    - рандомное значение
@error = hh.select{|key,_| params[key] ==""}.values.join(", ") # .join добавляtет в конце value (", ") и т.д. цикл выводит все значения value1, value2, value3 если они пустые*
разницы нет как называть _ или value - просто если переменная не используется, принято ее начинать с underscore ( _ ). Например: _foo или _bar. Можно написать _value - это ни на что не повлияет
************************************************************************************************************
************************************************************************************************************